given an array defined as:<br><br>arr = np.arange(30).reshape(5,6)<br><br>where arr looks like:<br><br>array([[ 0,  1,  2,  3,  4,  5],<br>       [ 6,  7,  8,  9, 10, 11],<br>       [12, 13, 14, 15, 16, 17],<br>       [18, 19, 20, 21, 22, 23],<br>       [24, 25, 26, 27, 28, 29]])<br><br>how could we select every 3rd element of the 3rd column?<br>what would the result yield?<br><br><br>	arr[::3, 2]<br>array([ 2, 20])<br><br>NOTE: Typical ndarray slicing looks like arr[3,:] for selecting the 4th row, and arr[:,3] for selecting the 4th column; the :: syntax allows you to do "every other" element for the specific dimension.
given an array defined as:<br><br>arr = np.arange(60).reshape(3,4,5)<br><br>where arr looks like:<br><br>array([[[ 0,  1,  2,  3,  4],<br>        [ 5,  6,  7,  8,  9],<br>        [10, 11, 12, 13, 14],<br>        [15, 16, 17, 18, 19]],<br><br>       [[20, 21, 22, 23, 24],<br>        [25, 26, 27, 28, 29],<br>        [30, 31, 32, 33, 34],<br>        [35, 36, 37, 38, 39]],<br><br>       [[40, 41, 42, 43, 44],<br>        [45, 46, 47, 48, 49],<br>        [50, 51, 52, 53, 54],<br>        [55, 56, 57, 58, 59]]])<br><br>how would you use an Ellipsis object to do the equivalent of arr[:,:,3]?<br>what would you expect the result to look like?	arr[...,3]<br>array([[ 3,  8, 13, 18],<br>       [23, 28, 33, 38],<br>       [43, 48, 53, 58]])<br><br>NOTE: an Ellipsis object expands to zero or more full slice objects (":") so the total number of dimensions of the slicing tuple matches the number of dimensions in the array. So here, arr.shape==(3,4,5), thus arr[...,3] is equivalent to arr[:,:,3]. Additionally, arr[0,...] is equivalent to arr[0,:,:], producing:<br><br>array([[ 0,  1,  2,  3,  4],<br>       [ 5,  6,  7,  8,  9],<br>       [10, 11, 12, 13, 14],<br>       [15, 16, 17, 18, 19]])
